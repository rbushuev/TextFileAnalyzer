@model FileSettingViewModel

@{
    ViewData["Title"] = "Home Page";
}

<form id="myForm" action="javascript:void(0);" method="POST" onsubmit="startHandle()">

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Имя новой базы данных</label>
        <div class="col-sm-10">
            <input class="form-control" type="text" asp-for="Name">
        </div>
    </div>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Путь к файлу</label>
        <div class="col-sm-9">
            <input class="form-control" type="text" asp-for="PathFile">
        </div>
        <div class="col-sm-1">
            @{await Html.RenderPartialAsync("_LoadListFilePathButtonPartialView");}
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-2"> </div>
        <div class="col-sm-10">
            <div class="form-check">
                <input class="form-check-input" asp-for="IsFirstString">
                <label class="form-check-label">Первая строка содержит заголовки</label>
            </div>
        </div>
    </div>

    <fieldset class="form-group">
        <div class="row">
            <label class="col-form-label col-sm-2 pt-0">Разделитель ячеек</label>
            <div class="col-sm-10">

                @foreach (SeparatorEnum item in Enum.GetValues(typeof(SeparatorEnum)))
                {
                    <div class="form-check">
                        <input onclick="switchCustomSeparatorInput(this)" class="form-check-input" type="radio" asp-for="CellSeparator.SeparatorEnum" value="@((int)item)">
                        <label class="form-check-label">@(item)</label>
                        @{
                            if (item == SeparatorEnum.Custom)
                            {
                                <input id="customSeparatorInput" class="form-control col-sm-2" type="text" asp-for="CellSeparator.CustomSeparator" disabled>
                            }
                        }
                    </div>
                }

            </div>
        </div>
    </fieldset>

    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Показать результат</button>
        </div>
    </div>

</form>



@{await Html.RenderPartialAsync("_HeadersTablePartialView");}

@{await Html.RenderPartialAsync("_MainTablePartialView");}

<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Редактирование записи</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div id="modal-body-editItem" class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Отменить</button>
                <button type="button" class="btn btn-primary">Сохранить изменения</button>
            </div>
        </div>
    </div>
</div>

<script>

    let items = [];

    function switchCustomSeparatorInput(radioButton) {
        let customSeparatorInput = document.getElementById('customSeparatorInput');
        radioButton.value === '3' ? customSeparatorInput.disabled = false : customSeparatorInput.disabled = true;
    }

    function displayEditForm(index) {
        const item = items[index];
        
    }

    async function startHandle() {

        event.preventDefault();
        var formData = new FormData(this.event.target)

        try {
            let response = await fetch('/api/handletext', { method: "POST", body: formData });
            let data = await response.json();
            items = [...data.rows];
            _displayItems(data);
        } catch (err) {
            console.error('Ошибка обработки формы', err);
        }
    }

    function _displayItems(data) {
        _resetTable();
        _displayHeaders(data.headers);
        _displayRows(data.rows);
    }

    function _resetTable() {
        var table = document.getElementById('mainTable');
        while (table.rows.length > 0) {
            table.deleteRow(0);
        }
    }

    function _displayHeaders(headers) {
        const thead = document.getElementById('theadInfo');
        let tr = thead.insertRow();

        headers.forEach(header => {
            let headerNode = document.createElement("TH");
            headerNode.innerHTML = header;
            tr.appendChild(headerNode);
        });
    }

    function _displayRows(rows) {
        const tBody = document.getElementById('tbodyInfo');

        rows.forEach((element, index) => {
            const tr = tBody.insertRow();

            element.cells.forEach(item => {
                let td = tr.insertCell();
                let textNode = document.createTextNode(item);
                td.appendChild(textNode);
            });

            let editButton = document.createElement('button');
            editButton.className = 'btn btn-primary';
            editButton.innerText = 'Edit';
            editButton.dataset.toggle = "modal";
            editButton.dataset.target = "#exampleModalCenter";
            editButton.setAttribute('onclick', `displayEditForm(${index})`);

            let tdEditButton = tr.insertCell();
            tdEditButton.appendChild(editButton);
        });


    }

</script>
