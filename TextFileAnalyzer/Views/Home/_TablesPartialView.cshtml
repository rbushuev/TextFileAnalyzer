
@{await Html.RenderPartialAsync("_HeadersTablePartialView");}

<hr />

@{await Html.RenderPartialAsync("_MainTablePartialView");}

@{await Html.RenderPartialAsync("_ModalWindowCRUDTable");}

<script>

    let data;

    async function fetchTable() {

        let formData = new FormData(document.forms.mainForm);

        try {
            let response = await fetch('/api/tables/getTable', { method: "POST", body: formData });
            data = await response.json();
            _displayTables(data.table.headers, data.table.rows);
        } catch (err) {
            console.error('Ошибка обработки формы', err);
        }
    }

    function _displayTables(headers, rows) {
        _resetTables();
        _displayHeadersTable(headers);
        _displayHeaders(headers);
        _displayRows(rows);
    }

    function _resetTables() {
        let tables = [document.getElementById('mainTable'), document.getElementById('headersTable')];
        tables.forEach(table => {
            while (table.rows.length > 0) {
                table.deleteRow(0);
            }
        });
    }

    function _displayHeaders(headers) {
        const thead = document.getElementById('mainTableTHead');
        let tr = thead.insertRow();

        headers.forEach(header => {
            let headerNode = document.createElement("TH");
            headerNode.innerHTML = header;
            tr.appendChild(headerNode);
        });

        let funcHeaderText = document.createElement("TH")
        funcHeaderText.innerHTML = 'Функции';
        tr.appendChild(funcHeaderText);
    }

    function _displayHeadersTable(headers) {
        const thead = document.getElementById('headersTableTHead');
        let tr = thead.insertRow();

        headers.forEach(header => {
            let headerNode = document.createElement("TH");
            headerNode.innerHTML = header;
            tr.appendChild(headerNode);
        });

        let editHeadersButton = document.createElement('button');
        editHeadersButton.className = 'btn btn-primary';
        editHeadersButton.innerText = 'Редактировать';
        editHeadersButton.dataset.toggle = 'modal';
        editHeadersButton.dataset.target = '#modalTableWindow';
        editHeadersButton.setAttribute('onclick', `openEditHeadersModalForm()`);

        tr.insertCell().appendChild(editHeadersButton);
    }

    function _displayRows(rows) {
        const tBody = document.getElementById('mainTableTBody');

        rows.forEach((element, index) => {
            const tr = tBody.insertRow();

            element.cells.forEach(item => {
                let td = tr.insertCell();
                let textNode = document.createTextNode(item);
                td.appendChild(textNode);
            });

            let editButton = document.createElement('button');
            editButton.className = 'btn btn-primary';
            editButton.innerText = 'Редактировать';
            editButton.dataset.toggle = 'modal';
            editButton.dataset.target = '#modalTableWindow';
            editButton.setAttribute('onclick', `openEditModalForm(${index})`);

            tr.insertCell().appendChild(editButton);
        });

        const tr = tBody.insertRow();

        let addRowButton = document.createElement('button');
        addRowButton.className = 'btn btn-outline-primary';
        addRowButton.innerText = 'Добавить новый объект';
        addRowButton.dataset.toggle = 'modal';
        addRowButton.dataset.target = '#modalTableWindow';
        addRowButton.setAttribute('onclick', `openAddRowModalForm()`);

        tr.insertCell().appendChild(addRowButton);
    }

    function _clearModalForm() {
        document.getElementById('modalTableBody').innerHTML = '';
        document.getElementById('modalTableFooter').innerHTML = '';
    }
</script>