#pragma checksum "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\Home\_TablesPartialView.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e0d6c29fa3440a5721a3c8e85ba7b1fd061c6bcc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home__TablesPartialView), @"mvc.1.0.view", @"/Views/Home/_TablesPartialView.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer.ViewModels;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e0d6c29fa3440a5721a3c8e85ba7b1fd061c6bcc", @"/Views/Home/_TablesPartialView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1a13540528c45a0ffdcf23fe13a2526a8c42967a", @"/Views/_ViewImports.cshtml")]
    public class Views_Home__TablesPartialView : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\Home\_TablesPartialView.cshtml"
  await Html.RenderPartialAsync("_HeadersTablePartialView");

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<hr />\r\n\r\n");
#nullable restore
#line 6 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\Home\_TablesPartialView.cshtml"
  await Html.RenderPartialAsync("_MainTablePartialView");

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 8 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\Home\_TablesPartialView.cshtml"
  await Html.RenderPartialAsync("_ModalWindowCRUDTable");

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<script>

    let data;

    async function fetchTable() {

        let formData = new FormData(document.forms.mainForm);

        try {
            let response = await fetch('/api/tables/getTable', { method: ""POST"", body: formData });
            data = await response.json();
            _displayTables(data.table.headers, data.table.rows);
        } catch (err) {
            console.error('Ошибка обработки формы', err);
        }
    }

    function _displayTables(headers, rows) {
        _resetTables();
        _displayHeadersTable(headers);
        _displayHeaders(headers);
        _displayRows(rows);
    }

    function _resetTables() {
        let tables = [document.getElementById('mainTable'), document.getElementById('headersTable')];
        tables.forEach(table => {
            while (table.rows.length > 0) {
                table.deleteRow(0);
            }
        });
    }

    function _displayHeaders(headers) {
        const thead = document.getElementById('ma");
            WriteLiteral(@"inTableTHead');
        let tr = thead.insertRow();

        headers.forEach(header => {
            let headerNode = document.createElement(""TH"");
            headerNode.innerHTML = header;
            tr.appendChild(headerNode);
        });

        let funcHeaderText = document.createElement(""TH"")
        funcHeaderText.innerHTML = 'Функции';
        tr.appendChild(funcHeaderText);
    }

    function _displayHeadersTable(headers) {
        const thead = document.getElementById('headersTableTHead');
        let tr = thead.insertRow();

        headers.forEach(header => {
            let headerNode = document.createElement(""TH"");
            headerNode.innerHTML = header;
            tr.appendChild(headerNode);
        });

        let editHeadersButton = document.createElement('button');
        editHeadersButton.className = 'btn btn-primary';
        editHeadersButton.innerText = 'Редактировать';
        editHeadersButton.dataset.toggle = 'modal';
        editHeadersButton.data");
            WriteLiteral(@"set.target = '#modalTableWindow';
        editHeadersButton.setAttribute('onclick', `openEditHeadersModalForm()`);

        tr.insertCell().appendChild(editHeadersButton);
    }

    function _displayRows(rows) {
        const tBody = document.getElementById('mainTableTBody');

        rows.forEach((element, index) => {
            const tr = tBody.insertRow();

            element.cells.forEach(item => {
                let td = tr.insertCell();
                let textNode = document.createTextNode(item);
                td.appendChild(textNode);
            });

            let editButton = document.createElement('button');
            editButton.className = 'btn btn-primary';
            editButton.innerText = 'Редактировать';
            editButton.dataset.toggle = 'modal';
            editButton.dataset.target = '#modalTableWindow';
            editButton.setAttribute('onclick', `openEditModalForm(${index})`);

            tr.insertCell().appendChild(editButton);
        });
");
            WriteLiteral(@"
        const tr = tBody.insertRow();

        let addRowButton = document.createElement('button');
        addRowButton.className = 'btn btn-outline-primary';
        addRowButton.innerText = 'Добавить новый объект';
        addRowButton.dataset.toggle = 'modal';
        addRowButton.dataset.target = '#modalTableWindow';
        addRowButton.setAttribute('onclick', `openAddRowModalForm()`);

        tr.insertCell().appendChild(addRowButton);
    }

    function _clearModalForm() {
        document.getElementById('modalTableBody').innerHTML = '';
        document.getElementById('modalTableFooter').innerHTML = '';
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
