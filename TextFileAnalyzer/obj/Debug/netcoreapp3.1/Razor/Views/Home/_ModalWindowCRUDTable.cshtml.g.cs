#pragma checksum "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\Home\_ModalWindowCRUDTable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b854b6c33b8768f59940128d5132c5c8b29b0ce3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home__ModalWindowCRUDTable), @"mvc.1.0.view", @"/Views/Home/_ModalWindowCRUDTable.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer.ViewModels;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b854b6c33b8768f59940128d5132c5c8b29b0ce3", @"/Views/Home/_ModalWindowCRUDTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1a13540528c45a0ffdcf23fe13a2526a8c42967a", @"/Views/_ViewImports.cshtml")]
    public class Views_Home__ModalWindowCRUDTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div class=""modal fade"" id=""modalTableWindow"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
    <div class=""modal-dialog modal-dialog-centered"" role=""document"">
        <div class=""modal-content"">

            <div class=""modal-header"">
                <h5 id=""modalTableWindowHeaderText"" class=""modal-title""></h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>

            <div id=""modalTableBody"" class=""modal-body""></div>

            <div id=""modalTableFooter"" class=""modal-footer""></div>

        </div>
    </div>
</div>

<script>

     async function saveHeaders() {

        let request = {
            fileSetting: data.fileSetting,
            oldHeaders: data.table.headers,
            newHeaders: _getNewRow()
        };

        try {
            let response = await fetch('/api/tables/editheaders', {
                meth");
            WriteLiteral(@"od: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(request)
            });
            data = await response.json();
            _displayTables(data.table.headers, data.table.rows);
        } catch (err) {
            console.error('Ошибка в обновлении названии колонок', err);
        }
    }

    async function addItem() {

        let request = {
            fileSetting: data.fileSetting,
            row: _getNewRow()
        };

        try {
            let response = await fetch('/api/tables/addItem', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(request)
            });
            data = await response.json();
            _displayTables(data.table.headers, data.table.rows);
        } catch (err) {
            console.error('Ошибка в добавлении объекта', err);
        }
    }

    async function saveEditableItem(index) {");
            WriteLiteral(@"

        let request = {
            fileSetting: data.fileSetting,
            oldRow: data.table.rows[index].cells,
            newRow: _getNewRow()
        };

        try {
            let response = await fetch('/api/tables/editItem', {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(request)
            });
            data = await response.json();
            _displayTables(data.table.headers, data.table.rows);
        } catch (err) {
            console.error('Ошибка изменения значении ', err);
        }
    }

    function _getNewRow() {
        let allInputEditable = [...document.getElementsByClassName(""newRow"")];
        return allInputEditable.map(input => input.value);
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
