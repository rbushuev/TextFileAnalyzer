#pragma checksum "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\Home\_LoadListFilePathButtonPartialView.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4410910cb53ce3f85ce106fb3e15e5312ea2f7c2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home__LoadListFilePathButtonPartialView), @"mvc.1.0.view", @"/Views/Home/_LoadListFilePathButtonPartialView.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Eqip3\Project\TextFileAnalyzer\TextFileAnalyzer\Views\_ViewImports.cshtml"
using TextFileAnalyzer.ViewModels;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4410910cb53ce3f85ce106fb3e15e5312ea2f7c2", @"/Views/Home/_LoadListFilePathButtonPartialView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1a13540528c45a0ffdcf23fe13a2526a8c42967a", @"/Views/_ViewImports.cshtml")]
    public class Views_Home__LoadListFilePathButtonPartialView : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<button onclick=""loadListFilePath()"" type=""button"" class=""btn btn-primary"" data-toggle=""modal"" data-target=""#selectFile"">...</button>

<div class=""modal fade"" id=""selectFile"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
    <div class=""modal-dialog modal-dialog-centered modal-xl"" role=""document"">
        <div class=""modal-content"">

            <div class=""modal-header"">
                <h5 class=""modal-title"">Выберите файл</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>

            <div id=""selectListButtonPath"" class=""modal-body"">
                <table id=""modalFileListTable"" class=""table table-hover table-bordered "" style=""table-layout: fixed"">
                    <thead>
                        <tr>
                            <td style=""width: 30%"">Имя файла</td>
                            <td style=""width: 40%"">Путь к файлу</td");
            WriteLiteral(@">
                            <td style=""width: 15%"">Размер файла в Kb</td>
                            <td style=""width: 15%"">Функции</td>
                        </tr>
                    </thead>
                    <tbody id=""modalFileListTBody""></tbody>
                </table>
            </div>

        </div>
    </div>
</div>

<script>

    let files = [];

    async function loadListFilePath() {
        try {
            let response = await fetch('/api/files');
            let data = await response.json();
            _resetListFileModalTable();
            files = [...data];
            addPathFilesInList(data);
        } catch (err) {
            console.error('Ошибка загрузки списка файлов', err);
        }
    }

    function addPathFilesInList(data) {
        const tBody = document.getElementById('modalFileListTBody');

        data.forEach((items, index) => {
            const tr = tBody.insertRow();

            for (var item in items) {
                le");
            WriteLiteral(@"t td = tr.insertCell();
                let textNode = document.createTextNode(items[item]);
                td.appendChild(textNode);
            }

            let selectButton = document.createElement('button');
            selectButton.className = 'btn btn-primary';
            selectButton.innerText = 'Выбрать';
            selectButton.dataset.dismiss = 'modal'
            selectButton.setAttribute('onclick', `selectFile(${index})`);

            let tdSelectButton = tr.insertCell();
            tdSelectButton.appendChild(selectButton);
        });
    }

    function _resetListFileModalTable() {
        var table = document.getElementById('modalFileListTable');
        while (table.rows.length > 1) {
            table.deleteRow(1);
        }
    }

    function selectFile(index) {
        let inputFile = document.getElementById('PathFile');
        let pathFile = files[index].fullPath;
        inputFile.value = pathFile;
    }

</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
